---
- name: Show 'ansible_*' values
  ansible.builtin.debug:
    msg:
      - "{{ networks[0] }}"

- name: Gather facts about the virtual machine
  community.vmware.vmware_vm_info:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    vm_name: "{{ server_name }}"
  delegate_to: localhost
  register: vm_info

- name: Find the VM
  ansible.builtin.set_fact:
    vm_to_move: "{{ vm_info.virtual_machines[0] }}"
  when: vm_info.virtual_machines | length > 0

- name: Get current network adapter settings
  community.vmware.vmware_guest_network:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    name: "{{ vm_to_move.guest_name }}"
    gather_network_info: true
  delegate_to: localhost
  register: current_network

- name: Debug current network information
  ansible.builtin.debug:
    var: current_network.network_info

- name: Set source_phase based on current network information
  ansible.builtin.set_fact:
    source_phase: "{{ current_network.network_info[0].network_name }}"

- name: Debug source_phase
  ansible.builtin.debug:
    msg: "source_phase is set to {{ source_phase }}"

- name: Fail if no network adapter found
  ansible.builtin.fail:
    msg: "No network adapter found matching the source_phase {{ source_phase }}"
  when: current_network.network_info | length == 0

- name: Identify existing network adapter
  ansible.builtin.set_fact:
    existing_adapter: "{{ current_network.network_info | selectattr('network_name', 'eq', source_phase) | list | first }}"
  when: current_network.network_info | length > 0

- name: Debug existing adapter
  ansible.builtin.debug:
    var: existing_adapter

- name: Debug dest_phase
  ansible.builtin.debug:
    var: dest_phase

- name: Update existing network adapter to dest_phase
  community.vmware.vmware_guest_network:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    name: "{{ vm_to_move.guest_name }}"
    device_type: vmxnet3
    network_name: "{{ dest_phase }}"
    mac_address: "{{ existing_adapter.mac_address }}"
    connected: true
    start_connected: true
    state: present
  delegate_to: localhost
  when: existing_adapter is defined

- name: Set network details for ServiceNow
  ansible.builtin.set_fact:
    snow_network_details:
      source_network: "{{ source_phase }}"
      destination_network: "{{ dest_phase }}"

- name: Build variable to send to SNOW
  ansible.builtin.set_fact:
    ticket_url: "{{ ticket_url }}"
    vm_moved: true
  when: vm_to_move is defined
