---
- name: Show 'ansible_*' values
  ansible.builtin.debug:
    msg:
      - "{{ networks[0] }}"

- name: Gather facts about the virtual machine
  community.vmware.vmware_vm_info:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    vm_name: "{{ server_name }}"
  delegate_to: localhost
  register: vm_info

- name: Find the VM
  ansible.builtin.set_fact:
    vm_to_move: "{{ vm_info.virtual_machines[0] }}"
  when: vm_info.virtual_machines | length > 0

- name: Get current network adapter settings
  community.vmware.vmware_guest_network:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    name: "{{ vm_to_move.guest_name }}"
    gather_network_info: true
  delegate_to: localhost
  register: current_network

- name: Identify existing network adapter
  ansible.builtin.set_fact:
    existing_adapter: "{{ current_network.network_info[0] }}"

- name: Update existing network adapter
  community.vmware.vmware_guest_network:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    name: "{{ vm_to_move.guest_name }}"
    device_type: vmxnet3
    network_name: "{{ dest_port_group }}"
    mac_address: "{{ existing_adapter.mac_address }}"
    connected: true
    start_connected: true
    state: present
  delegate_to: localhost
  when: existing_adapter is defined

- name: Restore VM to original port group
  community.vmware.vmware_guest_network:
    hostname: "{{ ansible_host }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    name: "{{ vm_to_move.guest_name }}"
    device_type: vmxnet3
    network_name: "{{ networks[0].name }}"
    mac_address: "{{ existing_adapter.mac_address }}"
    connected: true
    start_connected: true
    state: present
  delegate_to: localhost
  when:
    - existing_adapter is defined
    - existing_adapter.network_name != networks[0].name

- name: Build variable to send to SNOW
  ansible.builtin.set_fact:
    ticket_url: "{{ ticket_url }}"
    vm_moved: true
  when: vm_to_move is defined
